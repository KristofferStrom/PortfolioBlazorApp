@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@implements IDisposable

<header class="header" @ref="headerRef">
    <div class="container">
        <div class="logo">
            <a class="nav-link" @onclick='() => HandleClick("")' href="/">Kristofferström<span>.</span></a>
        </div>

        <nav class="nav-menu">
            <NavLink class="@(_currentUrl == "skills" ? "active nav-link" : "nav-link")" @onclick='() => HandleClick("skills")' href="#skills">Skills</NavLink>
            <NavLink class="@(_currentUrl == "projects" ? "active nav-link" : "nav-link")" @onclick='() => HandleClick("projects")' href="#projects">Projects</NavLink>
        </nav>
    </div>
</header>

@code {
    ElementReference headerRef;
    private string _currentSectionId = "";
    private string _currentUrl = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var dotnetHelper = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("scrollHandler.listenForScroll", dotnetHelper);
        }
    }

    private async Task HandleClick(string sectionId)
    {
        await JSRuntime.InvokeVoidAsync("scrollHandler.disableUserScrolling");
        await FetchFragment();
        await JSRuntime.InvokeVoidAsync("scrollHandler.enableUserScrolling");
    }

    private async Task FetchFragment()
    {
        _currentUrl = await JSRuntime.InvokeAsync<string>("getFragment");
        StateHasChanged(); // Uppdatera komponenten för att visa det nya värdet
    }

    [JSInvokable]
    public async Task OnScroll(string currentSectionId)
    {
        if (currentSectionId != "")
            await JSRuntime.InvokeVoidAsync("blazorHelpers.changeUrl", "#" + currentSectionId);
        else
            await JSRuntime.InvokeVoidAsync("blazorHelpers.changeUrl", "");

        await FetchFragment();
    }

    public void Dispose()
    {
        JSRuntime.InvokeVoidAsync("scrollHandler.stopListeningForScroll");
    }
}

<script>

    window.scrollHandler = {
        isUserScrolling: true,
        scrollTimeout: null,

        listenForScroll: function (dotnetHelper) {
            window.addEventListener('scroll', this.handleScrollEvent.bind(this, dotnetHelper));
        },

        handleScrollEvent: function (dotnetHelper) {
            if (!this.isUserScrolling) return;

            if (this.scrollTimeout) {
                clearTimeout(this.scrollTimeout);
            }

            this.scrollTimeout = setTimeout(() => {
                var sections = document.querySelectorAll('section');
                var currentSectionId = "";

                sections.forEach(function (section) {
                    var sectionTop = section.offsetTop;
                    var sectionHeight = section.offsetHeight;

                    if (pageYOffset >= (sectionTop - sectionHeight / 3) && pageYOffset < (sectionTop + sectionHeight - sectionHeight / 3)) {
                        currentSectionId = section.id;
                    }
                });

                dotnetHelper.invokeMethodAsync('OnScroll', currentSectionId);
            }, 100);
        },

        stopListeningForScroll: function () {
            window.removeEventListener('scroll', this.handleScrollEvent);
        },

        disableUserScrolling: function () {
            this.isUserScrolling = false;
        },

        enableUserScrolling: function () {
            setTimeout(() => {
                this.isUserScrolling = true;
            }, 10);
        }
    };

    window.blazorHelpers = {
        changeUrl: (newUrl) => {
            window.history.pushState({}, '', newUrl);
        }
    };

    window.getFragment = () => {
        return window.location.hash.substring(1);
    }
</script>
