  @page "/custom-components"

<div class="custom-components-page">
    <div class="container">
        <div class="exit-section">
            <TitleComponent Title="Custom Components" />
            <button class="btn btn-secondary" @onclick="CloseModal"><i class="fa-regular fa-xmark-large"></i></button>
        </div>

        <div class="title-section">
            <h4>Some of my custom Blazor components.</h4>
            <Dropdown Title="Select a Component" OnValueChanged="ChangeComponent" Options='["Dropdown", "Table"]' BackgroundColor="var(--color-gray-medium)" BorderColor="var(--color-theme)" />
        </div>


        <div class="components-section">

            <CustomComponent Style="@(_componentToDisplay == "Dropdown" ? "" : "display:none")" Title="Custom Dropdown" Description="Due to difficulties styling select elements in Razor code, I have created this generic dropdown component.">
                <div class="dropdown-component">
                    <Dropdown Title="Change animal icon" Options='["hippo", "cat", "dog"]' BackgroundColor="var(--color-gray-medium)" BorderColor="var(--color-secondary)" OnValueChanged="ChangeAnimal" />
                    <div class="animal-dropdown">
                        <Dropdown Title="Change animal color" Options='["green", "blue", "white"]' BackgroundColor="var(--color-gray-medium)" BorderColor="var(--color-secondary)" OnValueChanged="ChangeColor" />

                        <i class="fa-solid fa-@(_animal) animal-icon" style="color:@(_animalColor)"></i>
                    </div>
                </div>
            </CustomComponent>
            <CustomComponent Style="@(_componentToDisplay == "Table" ? "" : "display:none")" Title="Custom Table" Description="Due to difficulties styling select elements in Razor code, I have created this generic dropdown component.">
                <Table Model="TableModel" ColumnWidths='["30%", "30%", "40%"]' />
            </CustomComponent>

        </div>
    </div>
</div>

@code {
    [Parameter]
    public Func<Task> CloseModal { get; set; } = null!;

    public TableModel<HandballPlayerModel> TableModel { get; set; } = new();
    private string _componentToDisplay = "Dropdown";

    private string _animalColor =  "var(--color-secondary)";
    private string _animal = "hippo";

    protected override void OnInitialized()
    {
        TableModel.Items = PlayerService.GetPlayers();
        TableModel.Columns = new Dictionary<string, string>
        {
            { "FirstName", "Firstname" },
            { "LastName", "Lastname" },
            { "Position", "Position" }
        };
    }


    private void ChangeComponent(string component)
    {
        _componentToDisplay = component;
    }


    private void ChangeColor(string color)
    {
        if(color == null)
            _animalColor = "var(--color-secondary)";
        else 
            _animalColor = color;
    }

    private void ChangeAnimal(string animal)
    {
        if(animal == null)
            _animal = "hippo";
        else 
            _animal = animal;
    }
}

