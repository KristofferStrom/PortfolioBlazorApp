@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<header class="header">
    <div class="container">
        <div class="logo">
            <NavLink class="nav-link" href="/">Kristofferström<span>.</span></NavLink>
        </div>

        <nav class="nav-menu" style="display:@(isHomePage ? "flex" : "none")">
            <a class="nav-link" @onclick='() => ScrollToSection("skills")'>Skills</a>
            <a class="nav-link" @onclick='() => ScrollToSection("custom-components")'>Blazor components</a>
            <a class="nav-link" @onclick='() => ScrollToSection("projects")'>Projects</a>
        </nav>
    </div>
</header>

<button class="btn btn-secondary to-top" @onclick="ScrollToTop" style="display:@(showBackToTopButton ? "block" : "none");">↑ To the top</button>


@code {
    ElementReference headerRef;
    private string _currentSectionId = "";
    private string _currentUrl = "";

    private bool showBackToTopButton = false;
    private bool isHomePage;

    protected override void OnInitialized()
    {
        UpdateIsHomePage();
        NavigationManager.LocationChanged += HandleLocationChanged;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("setupScrollListener", DotNetObjectReference.Create(this));
        }
    }
    private void UpdateIsHomePage()
    {
        isHomePage = NavigationManager.Uri == NavigationManager.BaseUri;
        StateHasChanged();
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        UpdateIsHomePage();
        StateHasChanged(); // Tvinga en omrendering av komponenten
    }


    [JSInvokable]
    public void ToggleBackToTopButton(bool show)
    {
        if (showBackToTopButton != show)
        {
            showBackToTopButton = show;
            StateHasChanged();
        }
    }

    private void UpdateLinks()
    {
        // StateHasChanged();
    }

    private async Task ScrollToSection(string sectionId)
    {
        var uri = new Uri(NavigationManager.Uri);
        var currentUrl = uri.PathAndQuery;
        if(currentUrl != "/")
            NavigationManager.NavigateTo("/");
        
        await JSRuntime.InvokeVoidAsync("scrollToSection", sectionId);
    }

    private void ScrollToTop()
    {
        JSRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
    }

}
<script>
    function setupScrollListener(dotNetReference) {
        window.addEventListener('scroll', () => {
            let showButton = document.documentElement.scrollTop > 20 || document.body.scrollTop > 20;
            dotNetReference.invokeMethodAsync('ToggleBackToTopButton', showButton);
        });
    }

    function scrollToSection(sectionId) {
        const section = document.getElementById(sectionId);
        if (section) {
            section.scrollIntoView({ behavior: 'smooth' });
        }
    }
</script>
